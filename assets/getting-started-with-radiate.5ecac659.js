import{v as a,a as n,o as s,x as t}from"./vendor.71a64e95.js";const e={class:"markdown-body"},o=[t('<h1 id="getting-started-with-radiate" tabindex="-1">Getting started with Radiate <a class="header-anchor" href="#getting-started-with-radiate"><span class="sr-only">Jump to heading</span><span aria-hidden="true">#</span></a></h1><div class="text-lead"><p>A quick guide to getting started with Radiate - a WordPress plugin/theme framework inspired by Laravel.</p></div><p><img src="https://radiate-framework.github.io/social-preview.png" alt="Radiate logo"></p><p>Radiate is a framework I built for WordPress, heavily inspired by Laravel. All the APIs available are built around core WordPress functionality, but with nice OOP syntax to make the development experience similar to Laravel.</p><p>In this article, I will guide you through making a simple API that uses some of the functionality from the framework. As a massive Harry Potter fan, Let’s create a HP API.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation"><span class="sr-only">Jump to heading</span><span aria-hidden="true">#</span></a></h2><p>Radiate installs with composer. Navigate to the plugin/theme directory of your WordPress installation and run the following command:</p><pre class="language-bash"><code class="language-bash"><span class="token function">composer</span> create-project radiate/plugin harry-potter-api\n</code></pre><p>This will create a new plugin called <code>harry-potter-api</code>. In this directory, you will find everything you need to get started with the <code>Radiate</code> framework.</p><h2 id="api-routing" tabindex="-1">API Routing <a class="header-anchor" href="#api-routing"><span class="sr-only">Jump to heading</span><span aria-hidden="true">#</span></a></h2><p>By default, Radiate uses the <code>api</code> namespace for REST endpoints. We can change that by updating the <code>namespace</code> method in the <code>App\\Providers\\RouteServiceProvider</code> class. Let’s namespace all the Harry Potter routes with “hp”.</p><pre class="language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">mapApiRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;hp&#39;</span><span class="token punctuation">)</span> <span class="token comment">// changed from &quot;api&quot;</span>\n        <span class="token operator">-&gt;</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;api&#39;</span><span class="token punctuation">)</span>\n        <span class="token operator">-&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">basePath</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;routes/api.php&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><p>Now, lets create an API route. When a Witch or Wizard first arrives at Hogwarts, they get sorted into a house. Let’s do that.</p><p>In your <code>routes/api.php</code> file, create a route called “hogwarts/sort”. For now, we’ll return a random house:</p><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;hogwarts/sort&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">collect</span><span class="token punctuation">(</span>\n        <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Gryffindor&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hufflepuff&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Ravenclaw&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Slytherin&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</span></code></pre><p>Now go to the WordPress API endpoint <code>/wp-json/hp/hogwarts/sort</code>. You should see the response as a random house!</p><p>Instead of a <code>Closure</code>, we can use a dedicated <code>Controller</code> class. Using <code>wp-cli</code> we can use the Radiate command <code>make:controller</code>:</p><pre class="language-bash"><code class="language-bash">wp radiate make:controller HogwartsHouseController\n</code></pre>',18)],p={setup(t,{expose:p}){p({frontmatter:{name:"Getting started with Radiate",title:"Getting started with Radiate // Ben Rutland Web",description:"A quick guide to getting started with Radiate - a WordPress plugin and theme framework inspired by Laravel.",thumbnail:"https://radiate-framework.github.io/social-preview.png",tags:["radiate","php","wordpress"],layout:"post",meta:[{property:"og:title",content:"Getting started with Radiate // Ben Rutland Web"},{property:"og:description",content:"A quick guide to getting started with Radiate - a WordPress plugin and theme framework inspired by Laravel."},{name:"description",content:"A quick guide to getting started with Radiate - a WordPress plugin and theme framework inspired by Laravel."}]}});return a({title:"Getting started with Radiate // Ben Rutland Web",meta:[{property:"og:title",content:"Getting started with Radiate // Ben Rutland Web"},{property:"og:description",content:"A quick guide to getting started with Radiate - a WordPress plugin and theme framework inspired by Laravel."},{name:"description",content:"A quick guide to getting started with Radiate - a WordPress plugin and theme framework inspired by Laravel."}]}),(a,t)=>(s(),n("div",e,o))}};export{p as default};
