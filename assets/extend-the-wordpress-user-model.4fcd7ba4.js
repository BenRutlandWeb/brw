import{o as c,c as r,f as l,i as n,m as k,n as h,p as y,k as g,w as m,l as i,g as a}from"./index.8e955536.js";const f={class:"[&>*]:m-0 [&>*+*]:mt-4"},w={__name:"Panel",props:["type"],setup(t){const s=t,e={"bg-blue-100 [&>svg]:text-blue-500":s.type=="info","bg-green-100 [&>svg]:text-green-500":s.type=="success","bg-yellow-100 [&>svg]:text-yellow-500":s.type=="warning","bg-red-100 [&>svg]:text-red-500":s.type=="error"};return(o,u)=>{const p=y;return c(),r("div",{class:h([e,"p-4 mb-4 rounded flex gap-4"])},[l(p,{icon:t.type,class:"flex-none"},null,8,["icon"]),n("div",f,[k(o.$slots,"default")])])}}};var _="/img/extend-the-wordpress-user-model.png";const b={class:"markdown-body"},x=i('<h1 id="extend-the-wordpress-user-model" tabindex="-1">Extend the WordPress user model <a class="header-anchor" href="#extend-the-wordpress-user-model"><span class="sr-only">Jump to heading</span><span aria-hidden="true">#</span></a></h1><div class="text-lead"><p>Extending the <code>WP_User</code> class can help development by creating useful methods to interact with the user model.</p></div><p><img src="'+_+`" alt="Extend the WordPress user model"></p><h2 id="the-current-user" tabindex="-1">The current user <a class="header-anchor" href="#the-current-user"><span class="sr-only">Jump to heading</span><span aria-hidden="true">#</span></a></h2><p>We\u2019ll start by creating some static methods to get the current user and ID. It\u2019s quite common to need the current user but we always want to return an instance of our class rather than the parent <code>WP_User</code>.</p><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">WP_User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">currentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get_current_user_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">static</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">currentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</span></code></pre><h2 id="user-roles" tabindex="-1">User roles <a class="header-anchor" href="#user-roles"><span class="sr-only">Jump to heading</span><span aria-hidden="true">#</span></a></h2><p>The <code>WP_User</code> class has a few methods to interact with the user role:</p><ul><li><code>add_role</code> adds role to user</li><li><code>remove_role</code> removes role from user</li><li><code>set_role</code> sets the role of the user (replaces existing roles)</li></ul><p>I think we can do better. Let\u2019s check if the user has a role and get all roles.</p>`,10),W=n("p",null,[a("I\u2019ve left them out of the example below but I would also create camel-cased aliases for "),n("code",null,"add_role"),a(", "),n("code",null,"remove_role"),a(" and "),n("code",null,"set_role"),a(" for a consistent API.")],-1),v=n("p",null,[a("Where appropriate, return "),n("code",null,"$this"),a(" to allow for method chaining.")],-1),P=i(`<pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">addRole</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$role</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">static</span>
<span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">add_role</span><span class="token punctuation">(</span><span class="token variable">$role</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// create alias methods for remove_role and set_role for a consistent API.</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hasRole</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$role</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$role</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">roles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">roles</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</span></code></pre><h2 id="creating%2C-updating-and-deleting-users" tabindex="-1">Creating, updating and deleting users <a class="header-anchor" href="#creating%2C-updating-and-deleting-users"><span class="sr-only">Jump to heading</span><span aria-hidden="true">#</span></a></h2><p>Now our <code>User</code> class is more useful for interacting with roles, let\u2019s add create, update and delete functionality. We\u2019ll return an instance of the class (where it makes sense) so we can write fluent code like <code>User::create($attrs)-&gt;addRole(&#39;editor&#39;)-&gt;addRole(&#39;contributor&#39;)</code>.</p><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$attributes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">static</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;ID&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">wp_insert_user</span><span class="token punctuation">(</span><span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">is_wp_error</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name return-type">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">static</span>
<span class="token punctuation">{</span>
    <span class="token variable">$attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;ID&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token constant">ID</span><span class="token punctuation">;</span>

    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">wp_update_user</span><span class="token punctuation">(</span><span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">is_wp_error</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name return-type">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">wp_delete_user</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</span></code></pre>`,4),U="Extend the WordPress user model",I="Extend the WordPress user model // Ben Rutland Web",A="A guide to extending the WordPress WP_User class to streamline user functionality.",E="/img/extend-the-wordpress-user-model.png",R=["php","wordpress"],B="post",C="2024-01-01T00:00:00.000Z",D=[{property:"og:title",content:"Extend the WordPress user model // Ben Rutland Web"},{property:"og:description",content:"A guide to extending the WordPress WP_User class to streamline user functionality."},{name:"description",content:"A guide to extending the WordPress WP_User class to streamline user functionality."}],N={__name:"extend-the-wordpress-user-model",setup(t,{expose:s}){return s({frontmatter:{name:"Extend the WordPress user model",title:"Extend the WordPress user model // Ben Rutland Web",description:"A guide to extending the WordPress WP_User class to streamline user functionality.",thumbnail:"/img/extend-the-wordpress-user-model.png",tags:["php","wordpress"],layout:"post",createdAt:"2024-01-01T00:00:00.000Z",meta:[{property:"og:title",content:"Extend the WordPress user model // Ben Rutland Web"},{property:"og:description",content:"A guide to extending the WordPress WP_User class to streamline user functionality."},{name:"description",content:"A guide to extending the WordPress WP_User class to streamline user functionality."}]}}),g({title:"Extend the WordPress user model // Ben Rutland Web",meta:[{property:"og:title",content:"Extend the WordPress user model // Ben Rutland Web"},{property:"og:description",content:"A guide to extending the WordPress WP_User class to streamline user functionality."},{name:"description",content:"A guide to extending the WordPress WP_User class to streamline user functionality."}]}),(u,p)=>{const d=w;return c(),r("div",b,[x,l(d,{type:"info"},{default:m(()=>[W,v]),_:1}),P])}}};export{C as createdAt,N as default,A as description,B as layout,D as meta,U as name,R as tags,E as thumbnail,I as title};
